{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,yBAC/BC,YAAaF,SAASC,cAAc,uBACpCE,WAAYH,SAASC,cAAc,sBACnCG,aAAcJ,SAASC,cAAc,yBA8BvC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MApCPT,EAAKC,OAAOgB,iBAAiB,SAE7B,SAAuBC,GACrBA,EAAMC,iBAEN,IAAMC,EAAOC,OAAOrB,EAAKK,WAAWiB,OAC9BC,EAASF,OAAOrB,EAAKM,aAAagB,OACpCE,EAAQH,OAAOrB,EAAKI,YAAYkB,OAEpC,GAAIF,EAAO,GAAKG,EAAS,GAAKC,EAAQ,EAEpC,YADA1B,EAAA2B,OAAOC,QAAQ,sDAIjB,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAChCpB,EAAcoB,EAAGH,GACdI,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBX,EAAA2B,OAAOK,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,MAAK,CAAEuB,SAAS,OAE9EC,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBX,EAAA2B,OAAOC,QAAQ,sBAAqCK,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,MAAK,CAAEuB,SAAS,OAE9ER,GAASJ,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  button: document.querySelector(\"button[type='submit']\"),\n  delaySetter: document.querySelector(\"input[name='delay']\"),\n  stepSetter: document.querySelector(\"input[name='step']\"),\n  amountSetter: document.querySelector(\"input[name='amount']\"),\n};\n\nrefs.button.addEventListener('click', onButtonClick);\n\nfunction onButtonClick(event) {\n  event.preventDefault();\n\n  const step = Number(refs.stepSetter.value);\n  const amount = Number(refs.amountSetter.value);\n  let delay = Number(refs.delaySetter.value);\n\n  if (step < 0 || amount < 0 || delay < 0) {\n    Notify.failure('Please, make sure that ALL numbers are 0 or higher');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { useIcon: false });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { useIcon: false });\n      });\n    delay += step;\n  }\n\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)\n  });\n  return promise;\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","button","document","querySelector","delaySetter","stepSetter","amountSetter","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","step","Number","value","amount","delay1","Notify","failure","i","then","param","success","concat","useIcon","catch"],"version":3,"file":"03-promises.14da2578.js.map"}